{
  "address": "0x7aF27A067F54B152eDDf3C9D0d85A338243C2583",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "routers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "path1",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "path2",
          "type": "address[]"
        }
      ],
      "name": "holyray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "senseBnb",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "senseToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8d599e677f21277b0fb5692fb52ffc5b90b426b1d6a199bd9979d49bf47ba7c4",
  "receipt": {
    "to": null,
    "from": "0xcF18AEAD563e5DA39868F744E0259e735e74F57A",
    "contractAddress": "0x7aF27A067F54B152eDDf3C9D0d85A338243C2583",
    "transactionIndex": 24,
    "gasUsed": "1059482",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000804000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000008000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000400000000000000000000000000000000000000000000000",
    "blockHash": "0xe5be2415e94d6ef9d7b96feff06879db622e12d86ac2cd410523bd8dc3031718",
    "transactionHash": "0x8d599e677f21277b0fb5692fb52ffc5b90b426b1d6a199bd9979d49bf47ba7c4",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 19194946,
        "transactionHash": "0x8d599e677f21277b0fb5692fb52ffc5b90b426b1d6a199bd9979d49bf47ba7c4",
        "address": "0x7aF27A067F54B152eDDf3C9D0d85A338243C2583",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cf18aead563e5da39868f744e0259e735e74f57a"
        ],
        "data": "0x",
        "logIndex": 41,
        "blockHash": "0xe5be2415e94d6ef9d7b96feff06879db622e12d86ac2cd410523bd8dc3031718"
      }
    ],
    "blockNumber": 19194946,
    "cumulativeGasUsed": "5633320",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b187bdd07cda9ed32090191ab016012a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"routers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path2\",\"type\":\"address[]\"}],\"name\":\"holyray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"senseBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"senseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Silverion.sol\":\"Silverion\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Silverion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\ninterface ISwapRouter {\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\\ncontract Silverion is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    address private WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    receive() external payable {}\\n\\n    function holyray(\\n        uint256 amountIn,\\n        address[] calldata routers,\\n        address[] calldata path1,\\n        address[] calldata path2\\n    ) external onlyOwner {\\n        uint256 deadline = block.timestamp;\\n        address to = address(this);\\n\\n        if (path1[0] == WBNB) {\\n            uint256[] memory amounts0 = ISwapRouter(routers[0]).swapExactETHForTokens{value: amountIn}(\\n                0,\\n                path1,\\n                to,\\n                deadline\\n            );\\n            uint256 amountIn1 = amounts0[amounts0.length - 1];\\n            IERC20(path1[1]).approve(address(routers[1]), amountIn1);\\n            uint256[] memory amounts1 = ISwapRouter(routers[1]).swapExactTokensForETH(\\n                amountIn1,\\n                0,\\n                path2,\\n                to,\\n                deadline\\n            );\\n            require(amounts1[amounts1.length - 1] > amountIn, 'S1');\\n        } else {\\n            IERC20(path1[0]).approve(address(routers[0]), amountIn);\\n            uint256[] memory amounts0 = ISwapRouter(routers[0]).swapExactTokensForTokens(\\n                amountIn,\\n                0,\\n                path1,\\n                to,\\n                deadline\\n            );\\n            uint256 amountIn1 = amounts0[amounts0.length - 1];\\n            IERC20(path1[1]).approve(address(routers[1]), amountIn1);\\n            uint256[] memory amounts1 = ISwapRouter(routers[1]).swapExactTokensForTokens(\\n                amountIn1,\\n                0,\\n                path2,\\n                to,\\n                deadline\\n            );\\n            require(amounts1[amounts1.length - 1] > amountIn, 'S2');\\n        }\\n    }\\n\\n    function senseBnb(uint256 _amount) external onlyOwner {\\n        address payable addr = payable(address(msg.sender));\\n        addr.transfer(_amount);\\n    }\\n\\n    function senseToken(address _token, uint256 _amount) external onlyOwner {\\n        IERC20(_token).safeTransfer(address(msg.sender), _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x8b6cf15459f82e35d241b3b3f2171b4bdd5aba4fd01103e6824b3f012e57b375\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600180546001600160a01b03191673bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c17905534801561003657600080fd5b5061004033610045565b610095565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611164806100a46000396000f3fe6080604052600436106100595760003560e01c806313544c5c146100655780635bfdd9f614610087578063715018a6146100a757806380e61379146100bc5780638da5cb5b146100dc578063f2fde38b1461010857600080fd5b3661006057005b600080fd5b34801561007157600080fd5b50610085610080366004610ef7565b610128565b005b34801561009357600080fd5b506100856100a2366004610dee565b61018f565b3480156100b357600080fd5b506100856101d1565b3480156100c857600080fd5b506100856100d7366004610f0f565b610207565b3480156100e857600080fd5b50600054604080516001600160a01b039092168252519081900360200190f35b34801561011457600080fd5b50610085610123366004610dd4565b6109e5565b6000546001600160a01b0316331461015b5760405162461bcd60e51b81526004016101529061107b565b60405180910390fd5b6040513390819083156108fc029084906000818181858888f1935050505015801561018a573d6000803e3d6000fd5b505050565b6000546001600160a01b031633146101b95760405162461bcd60e51b81526004016101529061107b565b6101cd6001600160a01b0383163383610a80565b5050565b6000546001600160a01b031633146101fb5760405162461bcd60e51b81526004016101529061107b565b6102056000610ad2565b565b6000546001600160a01b031633146102315760405162461bcd60e51b81526004016101529061107b565b600154429030906001600160a01b0316868660008161026057634e487b7160e01b600052603260045260246000fd5b90506020020160208101906102759190610dd4565b6001600160a01b031614156105b3576000888860008181106102a757634e487b7160e01b600052603260045260246000fd5b90506020020160208101906102bc9190610dd4565b6001600160a01b0316637ff36ab58b60008a8a87896040518763ffffffff1660e01b81526004016102f1959493929190611011565b6000604051808303818588803b15801561030a57600080fd5b505af115801561031e573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526103479190810190610e17565b90506000816001835161035a91906110ee565b8151811061037857634e487b7160e01b600052603260045260246000fd5b60200260200101519050878760018181106103a357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906103b89190610dd4565b6001600160a01b031663095ea7b38b8b60018181106103e757634e487b7160e01b600052603260045260246000fd5b90506020020160208101906103fc9190610dd4565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b15801561044457600080fd5b505af1158015610458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047c9190610ed7565b5060008a8a60018181106104a057634e487b7160e01b600052603260045260246000fd5b90506020020160208101906104b59190610dd4565b6001600160a01b03166318cbafe58360008a8a898b6040518763ffffffff1660e01b81526004016104eb969594939291906110b0565b600060405180830381600087803b15801561050557600080fd5b505af1158015610519573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105419190810190610e17565b90508b816001835161055391906110ee565b8151811061057157634e487b7160e01b600052603260045260246000fd5b6020026020010151116105ab5760405162461bcd60e51b8152602060048201526002602482015261533160f01b6044820152606401610152565b5050506109da565b858560008181106105d457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906105e99190610dd4565b6001600160a01b031663095ea7b38989600081811061061857634e487b7160e01b600052603260045260246000fd5b905060200201602081019061062d9190610dd4565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018c9052604401602060405180830381600087803b15801561067557600080fd5b505af1158015610689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ad9190610ed7565b506000888860008181106106d157634e487b7160e01b600052603260045260246000fd5b90506020020160208101906106e69190610dd4565b6001600160a01b03166338ed17398b60008a8a87896040518763ffffffff1660e01b815260040161071c969594939291906110b0565b600060405180830381600087803b15801561073657600080fd5b505af115801561074a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107729190810190610e17565b90506000816001835161078591906110ee565b815181106107a357634e487b7160e01b600052603260045260246000fd5b60200260200101519050878760018181106107ce57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107e39190610dd4565b6001600160a01b031663095ea7b38b8b600181811061081257634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108279190610dd4565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b15801561086f57600080fd5b505af1158015610883573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a79190610ed7565b5060008a8a60018181106108cb57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108e09190610dd4565b6001600160a01b03166338ed17398360008a8a898b6040518763ffffffff1660e01b8152600401610916969594939291906110b0565b600060405180830381600087803b15801561093057600080fd5b505af1158015610944573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261096c9190810190610e17565b90508b816001835161097e91906110ee565b8151811061099c57634e487b7160e01b600052603260045260246000fd5b6020026020010151116109d65760405162461bcd60e51b8152602060048201526002602482015261299960f11b6044820152606401610152565b5050505b505050505050505050565b6000546001600160a01b03163314610a0f5760405162461bcd60e51b81526004016101529061107b565b6001600160a01b038116610a745760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610152565b610a7d81610ad2565b50565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261018a908490610b22565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610b77826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610bf49092919063ffffffff16565b80519091501561018a5780806020019051810190610b959190610ed7565b61018a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610152565b6060610c038484600085610c0d565b90505b9392505050565b606082471015610c6e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610152565b843b610cbc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610152565b600080866001600160a01b03168587604051610cd89190610ff5565b60006040518083038185875af1925050503d8060008114610d15576040519150601f19603f3d011682016040523d82523d6000602084013e610d1a565b606091505b5091509150610d2a828286610d35565b979650505050505050565b60608315610d44575081610c06565b825115610d545782518084602001fd5b8160405162461bcd60e51b81526004016101529190611048565b80356001600160a01b0381168114610d8557600080fd5b919050565b60008083601f840112610d9b578081fd5b50813567ffffffffffffffff811115610db2578182fd5b6020830191508360208260051b8501011115610dcd57600080fd5b9250929050565b600060208284031215610de5578081fd5b610c0682610d6e565b60008060408385031215610e00578081fd5b610e0983610d6e565b946020939093013593505050565b60006020808385031215610e29578182fd5b825167ffffffffffffffff80821115610e40578384fd5b818501915085601f830112610e53578384fd5b815181811115610e6557610e65611141565b8060051b604051601f19603f83011681018181108582111715610e8a57610e8a611141565b604052828152858101935084860182860187018a1015610ea8578788fd5b8795505b83861015610eca578051855260019590950194938601938601610eac565b5098975050505050505050565b600060208284031215610ee8578081fd5b81518015158114610c06578182fd5b600060208284031215610f08578081fd5b5035919050565b60008060008060008060006080888a031215610f29578283fd5b87359650602088013567ffffffffffffffff80821115610f47578485fd5b610f538b838c01610d8a565b909850965060408a0135915080821115610f6b578485fd5b610f778b838c01610d8a565b909650945060608a0135915080821115610f8f578384fd5b50610f9c8a828b01610d8a565b989b979a50959850939692959293505050565b81835260006020808501945082825b85811015610fea576001600160a01b03610fd783610d6e565b1687529582019590820190600101610fbe565b509495945050505050565b60008251611007818460208701611111565b9190910192915050565b85815260806020820152600061102b608083018688610faf565b6001600160a01b0394909416604083015250606001529392505050565b6020815260008251806020840152611067816040850160208701611111565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b86815285602082015260a0604082015260006110d060a083018688610faf565b6001600160a01b039490941660608301525060800152949350505050565b60008282101561110c57634e487b7160e01b81526011600452602481fd5b500390565b60005b8381101561112c578181015183820152602001611114565b8381111561113b576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000804000a",
  "deployedBytecode": "0x6080604052600436106100595760003560e01c806313544c5c146100655780635bfdd9f614610087578063715018a6146100a757806380e61379146100bc5780638da5cb5b146100dc578063f2fde38b1461010857600080fd5b3661006057005b600080fd5b34801561007157600080fd5b50610085610080366004610ef7565b610128565b005b34801561009357600080fd5b506100856100a2366004610dee565b61018f565b3480156100b357600080fd5b506100856101d1565b3480156100c857600080fd5b506100856100d7366004610f0f565b610207565b3480156100e857600080fd5b50600054604080516001600160a01b039092168252519081900360200190f35b34801561011457600080fd5b50610085610123366004610dd4565b6109e5565b6000546001600160a01b0316331461015b5760405162461bcd60e51b81526004016101529061107b565b60405180910390fd5b6040513390819083156108fc029084906000818181858888f1935050505015801561018a573d6000803e3d6000fd5b505050565b6000546001600160a01b031633146101b95760405162461bcd60e51b81526004016101529061107b565b6101cd6001600160a01b0383163383610a80565b5050565b6000546001600160a01b031633146101fb5760405162461bcd60e51b81526004016101529061107b565b6102056000610ad2565b565b6000546001600160a01b031633146102315760405162461bcd60e51b81526004016101529061107b565b600154429030906001600160a01b0316868660008161026057634e487b7160e01b600052603260045260246000fd5b90506020020160208101906102759190610dd4565b6001600160a01b031614156105b3576000888860008181106102a757634e487b7160e01b600052603260045260246000fd5b90506020020160208101906102bc9190610dd4565b6001600160a01b0316637ff36ab58b60008a8a87896040518763ffffffff1660e01b81526004016102f1959493929190611011565b6000604051808303818588803b15801561030a57600080fd5b505af115801561031e573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526103479190810190610e17565b90506000816001835161035a91906110ee565b8151811061037857634e487b7160e01b600052603260045260246000fd5b60200260200101519050878760018181106103a357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906103b89190610dd4565b6001600160a01b031663095ea7b38b8b60018181106103e757634e487b7160e01b600052603260045260246000fd5b90506020020160208101906103fc9190610dd4565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b15801561044457600080fd5b505af1158015610458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047c9190610ed7565b5060008a8a60018181106104a057634e487b7160e01b600052603260045260246000fd5b90506020020160208101906104b59190610dd4565b6001600160a01b03166318cbafe58360008a8a898b6040518763ffffffff1660e01b81526004016104eb969594939291906110b0565b600060405180830381600087803b15801561050557600080fd5b505af1158015610519573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105419190810190610e17565b90508b816001835161055391906110ee565b8151811061057157634e487b7160e01b600052603260045260246000fd5b6020026020010151116105ab5760405162461bcd60e51b8152602060048201526002602482015261533160f01b6044820152606401610152565b5050506109da565b858560008181106105d457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906105e99190610dd4565b6001600160a01b031663095ea7b38989600081811061061857634e487b7160e01b600052603260045260246000fd5b905060200201602081019061062d9190610dd4565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018c9052604401602060405180830381600087803b15801561067557600080fd5b505af1158015610689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ad9190610ed7565b506000888860008181106106d157634e487b7160e01b600052603260045260246000fd5b90506020020160208101906106e69190610dd4565b6001600160a01b03166338ed17398b60008a8a87896040518763ffffffff1660e01b815260040161071c969594939291906110b0565b600060405180830381600087803b15801561073657600080fd5b505af115801561074a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107729190810190610e17565b90506000816001835161078591906110ee565b815181106107a357634e487b7160e01b600052603260045260246000fd5b60200260200101519050878760018181106107ce57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107e39190610dd4565b6001600160a01b031663095ea7b38b8b600181811061081257634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108279190610dd4565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b15801561086f57600080fd5b505af1158015610883573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a79190610ed7565b5060008a8a60018181106108cb57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108e09190610dd4565b6001600160a01b03166338ed17398360008a8a898b6040518763ffffffff1660e01b8152600401610916969594939291906110b0565b600060405180830381600087803b15801561093057600080fd5b505af1158015610944573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261096c9190810190610e17565b90508b816001835161097e91906110ee565b8151811061099c57634e487b7160e01b600052603260045260246000fd5b6020026020010151116109d65760405162461bcd60e51b8152602060048201526002602482015261299960f11b6044820152606401610152565b5050505b505050505050505050565b6000546001600160a01b03163314610a0f5760405162461bcd60e51b81526004016101529061107b565b6001600160a01b038116610a745760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610152565b610a7d81610ad2565b50565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261018a908490610b22565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610b77826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610bf49092919063ffffffff16565b80519091501561018a5780806020019051810190610b959190610ed7565b61018a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610152565b6060610c038484600085610c0d565b90505b9392505050565b606082471015610c6e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610152565b843b610cbc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610152565b600080866001600160a01b03168587604051610cd89190610ff5565b60006040518083038185875af1925050503d8060008114610d15576040519150601f19603f3d011682016040523d82523d6000602084013e610d1a565b606091505b5091509150610d2a828286610d35565b979650505050505050565b60608315610d44575081610c06565b825115610d545782518084602001fd5b8160405162461bcd60e51b81526004016101529190611048565b80356001600160a01b0381168114610d8557600080fd5b919050565b60008083601f840112610d9b578081fd5b50813567ffffffffffffffff811115610db2578182fd5b6020830191508360208260051b8501011115610dcd57600080fd5b9250929050565b600060208284031215610de5578081fd5b610c0682610d6e565b60008060408385031215610e00578081fd5b610e0983610d6e565b946020939093013593505050565b60006020808385031215610e29578182fd5b825167ffffffffffffffff80821115610e40578384fd5b818501915085601f830112610e53578384fd5b815181811115610e6557610e65611141565b8060051b604051601f19603f83011681018181108582111715610e8a57610e8a611141565b604052828152858101935084860182860187018a1015610ea8578788fd5b8795505b83861015610eca578051855260019590950194938601938601610eac565b5098975050505050505050565b600060208284031215610ee8578081fd5b81518015158114610c06578182fd5b600060208284031215610f08578081fd5b5035919050565b60008060008060008060006080888a031215610f29578283fd5b87359650602088013567ffffffffffffffff80821115610f47578485fd5b610f538b838c01610d8a565b909850965060408a0135915080821115610f6b578485fd5b610f778b838c01610d8a565b909650945060608a0135915080821115610f8f578384fd5b50610f9c8a828b01610d8a565b989b979a50959850939692959293505050565b81835260006020808501945082825b85811015610fea576001600160a01b03610fd783610d6e565b1687529582019590820190600101610fbe565b509495945050505050565b60008251611007818460208701611111565b9190910192915050565b85815260806020820152600061102b608083018688610faf565b6001600160a01b0394909416604083015250606001529392505050565b6020815260008251806020840152611067816040850160208701611111565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b86815285602082015260a0604082015260006110d060a083018688610faf565b6001600160a01b039490941660608301525060800152949350505050565b60008282101561110c57634e487b7160e01b81526011600452602481fd5b500390565b60005b8381101561112c578181015183820152602001611114565b8381111561113b576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000804000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Silverion.sol:Silverion",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2023,
        "contract": "contracts/Silverion.sol:Silverion",
        "label": "WBNB",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}